{
  "name": "splinter",
  "displayName": "Splinter",
  "description": "",
  "publisher": "ctring",
  "version": "0.1.1",
  "engines": {
    "vscode": "^1.102.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "workspaceContains:**/*.{ts,py}"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "configuration": {
      "title": "Splinter",
      "properties": {
        "splinter.rootDir": {
          "type": "string",
          "default": ".",
          "definitions": "Root directory of the files to analyze"
        },
        "splinter.batchSize": {
          "type": "number",
          "default": 50,
          "definitions": "Number of files to analyze in a batch"
        },
        "splinter.language": {
          "type": "string",
          "default": "auto",
          "enum": [
            "auto",
            "typescript",
            "python"
          ],
          "definitions": "Programming language of the text to analyze"
        },
        "splinter.exclude": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "**/node_modules/**",
            "**/dist/**",
            "**/build/**",
            "**/out/**",
            "**/target/**",
            "**/.vscode/**",
            "**/.git/**",
            "**/.github/**",
            "**/test*",
            "**/tests/**",
            "**/migrations/**"
          ]
        }
      }
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "splinter",
          "title": "Splinter",
          "icon": "media/splinter-activitybar.svg"
        }
      ]
    },
    "views": {
      "splinter": [
        {
          "id": "info",
          "name": "Info"
        },
        {
          "id": "recognized",
          "name": "Recognized"
        },
        {
          "id": "unknown",
          "name": "Unknown"
        }
      ]
    },
    "menus": {
      "view/item/context": [
        {
          "command": "splinter.item.addTag",
          "when": "view == recognized || view == unknown",
          "group": "inline"
        },
        {
          "command": "splinter.item.editNote",
          "when": "view == recognized || view == unknown",
          "group": "inline"
        },
        {
          "command": "splinter.item.clearNote",
          "when": "(view == recognized || view == unknown) && viewItem =~ /hasNote/",
          "group": "inline"
        },
        {
          "command": "splinter.item.addTag",
          "when": "view == recognized || view == unknown",
          "group": "1_note@1"
        },
        {
          "command": "splinter.item.editNote",
          "when": "view == recognized || view == unknown",
          "group": "1_note@2"
        },
        {
          "command": "splinter.item.clearNote",
          "when": "(view == recognized || view == unknown) && viewItem =~ /hasNote/",
          "group": "1_note@3"
        },
        {
          "command": "splinter.entity.moveToUnknown",
          "when": "view == recognized && viewItem =~ /entity/",
          "group": "2_edit@1"
        },
        {
          "command": "splinter.entity.moveToRecognized",
          "when": "view == unknown && viewItem =~ /entity/",
          "group": "2_edit@1"
        },
        {
          "command": "splinter.operation.add",
          "when": "view == recognized && viewItem =~ /entity/",
          "group": "2_edit@2"
        },
        {
          "command": "splinter.operation.moveToUnknown",
          "when": "view == recognized && viewItem =~ /operation/",
          "group": "2_edit@1"
        },
        {
          "command": "splinter.argument.add",
          "when": "view == recognized && viewItem =~ /operation/",
          "group": "2_edit@2"
        },
        {
          "command": "splinter.item.remove",
          "when": "view == recognized && viewItem =~ /custom/",
          "group": "2_edit@2"
        },
        {
          "command": "splinter.item.copy",
          "when": "view == recognized || view == unknown",
          "group": "3_copy@1"
        },
        {
          "command": "splinter.info.copy",
          "when": "view == info",
          "group": "3_copy@1"
        }
      ],
      "view/title": [
        {
          "command": "splinter.showAsFlatList",
          "when": "view == recognized && !splinter.isFlat",
          "group": "navigation@1"
        },
        {
          "command": "splinter.showAsTree",
          "when": "view == recognized && splinter.isFlat",
          "group": "navigation@1"
        },
        {
          "command": "splinter.entity.add",
          "when": "view == recognized",
          "group": "navigation@2"
        },
        {
          "command": "splinter.filter.createRecognized",
          "when": "view == recognized && !splinter.hasFilterInRecognized",
          "group": "navigation@3"
        },
        {
          "command": "splinter.filter.createUnknown",
          "when": "view == unknown && !splinter.hasFilterInUnknown",
          "group": "navigation@3"
        },
        {
          "command": "splinter.filter.clearRecognized",
          "when": "view == recognized && splinter.hasFilterInRecognized",
          "group": "navigation@3"
        },
        {
          "command": "splinter.filter.clearUnknown",
          "when": "view == unknown && splinter.hasFilterInUnknown",
          "group": "navigation@3"
        }
      ]
    },
    "commands": [
      {
        "command": "splinter.showAsFlatList",
        "title": "Show as flat List",
        "icon": "$(list-flat)"
      },
      {
        "command": "splinter.showAsTree",
        "title": "Show as tree",
        "icon": "$(list-tree)"
      },
      {
        "command": "splinter.item.show",
        "title": "Show Item"
      },
      {
        "command": "splinter.item.copy",
        "title": "Copy"
      },
      {
        "command": "splinter.info.copy",
        "title": "Copy"
      },
      {
        "command": "splinter.item.editNote",
        "title": "Edit Note",
        "icon": "$(pencil)"
      },
      {
        "command": "splinter.item.addTag",
        "title": "Add Tag",
        "icon": "$(tag)"
      },
      {
        "command": "splinter.item.clearNote",
        "title": "Clear Note",
        "icon": "$(clear-all)"
      },
      {
        "command": "splinter.entity.add",
        "title": "New Entity",
        "category": "Splinter",
        "icon": "$(add)"
      },
      {
        "command": "splinter.entity.moveToUnknown",
        "title": "Move to Unknown"
      },
      {
        "command": "splinter.entity.moveToRecognized",
        "title": "Move to Recognized"
      },
      {
        "command": "splinter.operation.add",
        "title": "Add Operation"
      },
      {
        "command": "splinter.operation.moveToUnknown",
        "title": "Move to Unknown"
      },
      {
        "command": "splinter.argument.add",
        "title": "Add Argument"
      },
      {
        "command": "splinter.item.remove",
        "title": "Remove"
      },
      {
        "command": "splinter.reanalyze",
        "title": "Reanalyze",
        "category": "Splinter",
        "icon": "$(sync)"
      },
      {
        "command": "splinter.reload",
        "title": "Reload from Saved File",
        "category": "Splinter",
        "icon": "$(symbol-file)"
      },
      {
        "command": "splinter.autoAnnotate",
        "title": "Auto annotate",
        "category": "Splinter"
      },
      {
        "command": "splinter.clearAutoAnnotate",
        "title": "Clear auto annotate",
        "category": "Splinter"
      },
      {
        "command": "splinter.recognizeUnknownAggressively",
        "title": "Recognize unknown aggressively",
        "category": "Splinter"
      },
      {
        "command": "splinter.filter.createRecognized",
        "title": "Filter",
        "category": "Splinter",
        "icon": "$(filter)"
      },
      {
        "command": "splinter.filter.clearRecognized",
        "title": "Clear Filter",
        "category": "Splinter",
        "icon": "$(filter-filled)"
      },
      {
        "command": "splinter.filter.createUnknown",
        "title": "Filter",
        "category": "Splinter",
        "icon": "$(filter)"
      },
      {
        "command": "splinter.filter.clearUnknown",
        "title": "Clear Filter",
        "category": "Splinter",
        "icon": "$(filter-filled)"
      }
    ],
    "keybindings": [
      {
        "command": "splinter.filter.createRecognized",
        "key": "ctrl+alt+f",
        "when": "activeViewlet == 'workbench.view.extension.splinter'"
      },
      {
        "command": "splinter.filter.clearRecognized",
        "key": "ctrl+alt+c",
        "when": "activeViewlet == 'workbench.view.extension.splinter'"
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@types/eslint": "^8.37.0",
    "@types/glob": "^8.1.0",
    "@types/mocha": "^10.0.1",
    "@types/node": "16.x",
    "@types/pluralize": "^0.0.29",
    "@types/tmp": "^0.2.6",
    "@types/vscode": "^1.77.0",
    "@vscode/test-electron": "^2.3.0",
    "mocha": "^10.2.0",
    "typescript": "^4.9.5"
  },
  "dependencies": {
    "@ctring/splinter-eslint": "^1.0.8",
    "@vscode/vsce": "^3.6.0",
    "glob": "^8.1.0",
    "pluralize": "^8.0.0",
    "tmp": "^0.2.3"
  },
  "extensionDependencies": [
    "vscode.git"
  ]
}